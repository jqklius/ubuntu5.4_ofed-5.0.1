From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/fs_core.c

Change-Id: Ie3c02fef31d86215ad6ebdf4bc6c3a9514d3368f
---
 .../net/ethernet/mellanox/mlx5/core/fs_core.c | 77 ++++++++++++++++++-
 1 file changed, 74 insertions(+), 3 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@ -229,15 +229,27 @@ enum fs_i_lock_class {
 };
 
 static const struct rhashtable_params rhash_fte = {
+#ifndef FIELD_SIZEOF
+	.key_len = sizeof_field(struct fs_fte, val),
+#else
 	.key_len = FIELD_SIZEOF(struct fs_fte, val),
+#endif
 	.key_offset = offsetof(struct fs_fte, val),
 	.head_offset = offsetof(struct fs_fte, hash),
 	.automatic_shrinking = true,
 	.min_size = 1,
 };
 
+#if !defined(HAVE_RHLTABLE) && defined(HAVE_NETNS_FRAGS_RHASHTABLE)
+static const struct bp_rhashtable_params rhash_fg = {
+#else
 static const struct rhashtable_params rhash_fg = {
+#endif
+#ifndef FIELD_SIZEOF
+	.key_len = sizeof_field(struct mlx5_flow_group, mask),
+#else
 	.key_len = FIELD_SIZEOF(struct mlx5_flow_group, mask),
+#endif
 	.key_offset = offsetof(struct mlx5_flow_group, mask),
 	.head_offset = offsetof(struct mlx5_flow_group, hash),
 	.automatic_shrinking = true,
@@ -486,7 +498,9 @@ static void del_hw_flow_table(struct fs_
 	fs_get_obj(ft, node);
 	dev = get_dev(&ft->node);
 	root = find_root(&ft->node);
+#ifndef MLX_DISABLE_TRACEPOINTS
 	trace_mlx5_fs_del_ft(ft);
+#endif
 
 	if (node->active) {
 		err = root->cmds->destroy_flow_table(root, ft);
@@ -502,7 +516,11 @@ static void del_sw_flow_table(struct fs_
 
 	fs_get_obj(ft, node);
 
+#if !defined(HAVE_RHLTABLE) && defined(HAVE_NETNS_FRAGS_RHASHTABLE)
+	bp_rhltable_destroy(&ft->fgs_hash);
+#else
 	rhltable_destroy(&ft->fgs_hash);
+#endif
 	fs_get_obj(prio, ft->node.parent);
 	prio->num_ft--;
 	kfree(ft);
@@ -544,7 +562,9 @@ static void del_sw_hw_rule(struct fs_nod
 	}
 
 	fs_get_obj(fte, rule->node.parent);
-	trace_mlx5_fs_del_rule(rule);
+#ifndef MLX_DISABLE_TRACEPOINTS
+       trace_mlx5_fs_del_rule(rule);
+#endif
 	if (rule->sw_action == MLX5_FLOW_CONTEXT_ACTION_FWD_NEXT_PRIO) {
 		mutex_lock(&rule->dest_attr.ft->lock);
 		list_del(&rule->next_ft);
@@ -582,7 +602,9 @@ static void del_hw_fte(struct fs_node *n
 	fs_get_obj(fg, fte->node.parent);
 	fs_get_obj(ft, fg->node.parent);
 
+#ifndef MLX_DISABLE_TRACEPOINTS
 	trace_mlx5_fs_del_fte(fte);
+#endif
 	dev = get_dev(&ft->node);
 	root = find_root(&ft->node);
 	if (node->active) {
@@ -623,7 +645,9 @@ static void del_hw_flow_group(struct fs_
 	fs_get_obj(fg, node);
 	fs_get_obj(ft, fg->node.parent);
 	dev = get_dev(&ft->node);
+#ifndef MLX_DISABLE_TRACEPOINTS
 	trace_mlx5_fs_del_fg(fg);
+#endif
 
 	root = find_root(&ft->node);
 	if (fg->node.active && root->cmds->destroy_flow_group(root, ft, fg))
@@ -648,7 +672,11 @@ static void del_sw_flow_group(struct fs_
 			ft->autogroup.num_big_groups--;
 		ft->autogroup.num_groups--;
 	}
+#if !defined(HAVE_RHLTABLE) && defined(HAVE_NETNS_FRAGS_RHASHTABLE)
+	err = bp_rhltable_remove(&ft->fgs_hash,
+#else
 	err = rhltable_remove(&ft->fgs_hash,
+#endif
 			      &fg->hash,
 			      rhash_fg);
 	WARN_ON(err);
@@ -758,7 +786,11 @@ static struct mlx5_flow_group *alloc_ins
 		return fg;
 
 	/* initialize refcnt, add to parent list */
+#if !defined(HAVE_RHLTABLE) && defined(HAVE_NETNS_FRAGS_RHASHTABLE)
+	ret = bp_rhltable_insert(&ft->fgs_hash,
+#else
 	ret = rhltable_insert(&ft->fgs_hash,
+#endif
 			      &fg->hash,
 			      rhash_fg);
 	if (ret) {
@@ -788,7 +820,11 @@ static struct mlx5_flow_table *alloc_flo
 	if (!ft)
 		return ERR_PTR(-ENOMEM);
 
+#if !defined(HAVE_RHLTABLE) && defined(HAVE_NETNS_FRAGS_RHASHTABLE)
+	ret = bp_rhltable_init(&ft->fgs_hash, &rhash_fg);
+#else
 	ret = rhltable_init(&ft->fgs_hash, &rhash_fg);
+#endif
 	if (ret) {
 		kfree(ft);
 		return ERR_PTR(ret);
@@ -1132,7 +1168,9 @@ static struct mlx5_flow_table *__mlx5_cr
 	fs_prio->num_ft++;
 	up_write_ref_node(&fs_prio->node, false);
 	mutex_unlock(&root->chain_lock);
+#ifndef MLX_DISABLE_TRACEPOINTS
 	trace_mlx5_fs_add_ft(ft);
+#endif
 	return ft;
 destroy_ft:
 	root->cmds->destroy_flow_table(root, ft);
@@ -1238,7 +1276,9 @@ struct mlx5_flow_group *mlx5_create_flow
 		tree_put_node(&fg->node, false);
 		return ERR_PTR(err);
 	}
-	trace_mlx5_fs_add_fg(fg);
+#ifndef MLX_DISABLE_TRACEPOINTS
+       trace_mlx5_fs_add_fg(fg);
+#endif
 	fg->node.active = true;
 
 	return fg;
@@ -1478,7 +1518,9 @@ static int create_auto_flow_group(struct
 	err = root->cmds->create_flow_group(root, ft, in, fg);
 	if (!err) {
 		fg->node.active = true;
+#ifndef MLX_DISABLE_TRACEPOINTS
 		trace_mlx5_fs_add_fg(fg);
+#endif
 	}
 
 	kvfree(in);
@@ -1673,14 +1715,18 @@ static struct mlx5_flow_handle *add_rule
 		fte->action.action = old_action;
 		return handle;
 	}
+#ifndef MLX_DISABLE_TRACEPOINTS
 	trace_mlx5_fs_set_fte(fte, false);
+#endif
 
 	for (i = 0; i < handle->num_rules; i++) {
 		if (refcount_read(&handle->rule[i]->node.refcount) == 1) {
 			dest_name = get_dest_name(&handle->rule[i]->dest_attr);
 			tree_add_node(&handle->rule[i]->node, &fte->node, dest_name);
 			kfree(dest_name);
+#ifndef MLX_DISABLE_TRACEPOINTS
 			trace_mlx5_fs_add_rule(handle->rule[i]);
+#endif
 			notify_add_rule(handle->rule[i]);
 		}
 	}
@@ -1741,16 +1787,26 @@ static int build_match_list(struct match
 			    struct mlx5_flow_spec *spec,
 			    bool ft_locked)
 {
+#if !defined(HAVE_RHLTABLE) && defined(HAVE_NETNS_FRAGS_RHASHTABLE)
+	struct bp_rhlist_head *tmp, *list;
+#else
 	struct rhlist_head *tmp, *list;
+#endif
 	struct mlx5_flow_group *g;
 	int err = 0;
 
 	rcu_read_lock();
 	INIT_LIST_HEAD(&match_head->list);
 	/* Collect all fgs which has a matching match_criteria */
+#if !defined(HAVE_RHLTABLE) && defined(HAVE_NETNS_FRAGS_RHASHTABLE)
+	list = bp_rhltable_lookup(&ft->fgs_hash, spec, rhash_fg);
+	/* RCU is atomic, we can't execute FW commands here */
+	bp_rhl_for_each_entry_rcu(g, tmp, list, hash) {
+#else
 	list = rhltable_lookup(&ft->fgs_hash, spec, rhash_fg);
 	/* RCU is atomic, we can't execute FW commands here */
 	rhl_for_each_entry_rcu(g, tmp, list, hash) {
+#endif
 		struct match_list *curr_match;
 
 		if (likely(list_empty(&match_head->list))) {
@@ -1849,6 +1905,9 @@ try_add_to_existing_fg(struct mlx5_flow_
 search_again_locked:
 	version = matched_fgs_get_version(match_head);
 	if (flow_act->flags & FLOW_ACT_NO_APPEND)
+#ifndef HAVE_TC_CLS_OFFLOAD_HANDLE
+		goto skip_search;
+#else
 		list_for_each_entry(iter, match_head, list) {
 			struct fs_fte *fte_tmp;
 
@@ -1866,7 +1925,7 @@ search_again_locked:
 			tree_put_node(&fte_tmp->node, false);
 			goto skip_search;
 		}
-
+#endif
 	/* Try to find a fg that already contains a matching fte */
 	list_for_each_entry(iter, match_head, list) {
 		struct fs_fte *fte_tmp;
@@ -2743,6 +2802,10 @@ void mlx5_cleanup_fs(struct mlx5_core_de
 	fs_debugfs_cleanup(dev);
 	kmem_cache_destroy(steering->ftes_cache);
 	kmem_cache_destroy(steering->fgs_cache);
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION(3,6,11))
+	kfree(steering->ftes_cache_name);
+	kfree(steering->fgs_cache_name);
+#endif
 	kfree(steering);
 }
 
@@ -3017,6 +3080,10 @@ int mlx5_init_fs(struct mlx5_core_dev *d
 	steering->dev = dev;
 	dev->priv.steering = steering;
 
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION(3,6,11))
+	steering->ftes_cache_name = ftes_cache_name;
+	steering->fgs_cache_name = fgs_cache_name;
+#endif
 	snprintf(ftes_cache_name, CACHE_SIZE_NAME, "fs_ftes_%s", dev_name(dev->device));
 	snprintf(fgs_cache_name, CACHE_SIZE_NAME, "fs_fgs_%s", dev_name(dev->device));
 	steering->fgs_cache = kmem_cache_create(fgs_cache_name,
@@ -3086,12 +3153,16 @@ int mlx5_init_fs(struct mlx5_core_dev *d
 			goto err;
 	}
 
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(3,6,11))
 	kfree(ftes_cache_name);
 	kfree(fgs_cache_name);
+#endif
 	return 0;
 err:
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(3,6,11))
 	kfree(ftes_cache_name);
 	kfree(fgs_cache_name);
+#endif
 	mlx5_cleanup_fs(dev);
 	return err;
 }
